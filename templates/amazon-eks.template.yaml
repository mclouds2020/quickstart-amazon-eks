AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys an EKS cluster into an existing VPC (qs-1p7nknoi6)
Transform: [QuickStartParameterResolver]
Metadata:
  QSLint:
    Exclusions: [W9002, W9003, W9004, W9006]
  ConfigSetName: !Ref ConfigSetName
Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: aws-quickstart
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    Default: quickstart-amazon-eks/
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
  EKSPublicAccessEndpoint:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Disabled
  AdditionalEKSAdminUserArn:
    Type: String
    Default: ""
  AdditionalEKSAdminRoleArn:
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues: [t3.nano,t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge, m5.large, m5.xlarge, m5.2xlarge
                    m5.4xlarge, m5.12xlarge, m5.24xlarge, c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
                    i3.large, i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge, i3.16xlarge, x1.16xlarge, x1.32xlarge, p3.2xlarge,
                    p3.8xlarge, p3.16xlarge, r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge, r5d.large, 
                    r5d.xlarge, r5d.2xlarge, r5d.4xlarge, r5d.12xlarge, r5d.24xlarge, z1d.large, z1d.xlarge, z1d.2xlarge. 
                    z1d.3xlarge, z1d.6xlarge, z1d.12xlarge]
    ConstraintDescription: Must be a valid EC2 instance type
    Type: String
  NumberOfNodes:
    Default: 3
    Type: Number
  MaxNumberOfNodes:
    Default: 3
    Type: Number
  ManagedNodeGroup:
    AllowedValues: [ "yes", "no" ]
    Default: "no"
    Description: Choose if you want to use a managed node group. If you select "yes", you must select Kubernetes Version 1.14 or higher.
    Type: String
  WindowsSupport:
    AllowedValues: ["Enabled", "Disabled"]
    Description: Choose Enabled to create a Windows Nodegroup. If you choose "Enabled", you must select Kubernetes Version 1.14 or higher.
    Type: String
    Default: "Disabled"
  WindowsCustomAmiId:
    Description: (Optional) Specify your own custom AMI ID.
    Type: String
    Default: ""
  WindowsNodeInstanceType:
    Default: t3.medium
    AllowedValues: [t3.nano,t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge, m5.large, m5.xlarge, m5.2xlarge
                    m5.4xlarge, m5.12xlarge, m5.24xlarge, c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
                    i3.large, i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge, i3.16xlarge, x1.16xlarge, x1.32xlarge, p3.2xlarge,
                    p3.8xlarge, p3.16xlarge, r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge, r5d.large, 
                    r5d.xlarge, r5d.2xlarge, r5d.4xlarge, r5d.12xlarge, r5d.24xlarge, z1d.large, z1d.xlarge, z1d.2xlarge. 
                    z1d.3xlarge, z1d.6xlarge, z1d.12xlarge]
    ConstraintDescription: Must be a valid EC2 instance type
    Type: String
  WindowsNumberOfNodes:
    Default: 3
    Type: Number
  WindowsNodeGroupName:
    Default: Default-Windows
    Type: String
  WindowsNodeVolumeSize:
    Default: 50
    Type: String
  VPCID:
    Type: "AWS::EC2::VPC::Id"
  PublicSubnet1ID:
    Type: String
    Default: ""
  PublicSubnet2ID:
    Type: String
    Default: ""
  PublicSubnet3ID:
    Type: String
    Default: ""
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet2ID:
    Type: String
    Default: ""
  PrivateSubnet3ID:
    Type: String
    Default: ""
  ProvisionClusterAutoScaler:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Disabled"
  ProvisionALBIngressController:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Disabled"
  ProvisionMonitoringStack:
    Type: String
    AllowedValues: [ "Prometheus + Grafana", "None" ]
    Default: "None"
  ProvisionBastionHost:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
  BastionAMIID:
    Type: String
    Default: ""
  EfsStorageClass:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Disabled
  HttpProxy:
    Type: String
    Default: ""
  FargateNamespaces:
    Type: String
    Default: ""
  FargateLabels:
    Type: String
    Default: ""
  EKSClusterName:
    Type: String
    Default: ""
    Description: "[OPTIONAL] Name for the EKS cluster, if left blank one will be auto-generated."
  SnykIntegrationId:
    Type: String
    Default: ""
  SnykIntegration:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Disabled
  NewRelicLicenseKey:
    Type: String
    Default: ""
    NoEcho: true
  NewRelicIntegration:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Disabled
  ConfigSetName:
    Type: String
Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }
    ParameterPrefix: { Value: '/quickstart/amazon-eks' }
Conditions:
  DeployTestStack: !Equals [~~/<ConfigSetName>/quickstart/TestSuite~~, Enabled]
  EnableSnyk: !Equals [ !Ref SnykIntegration, Enabled]
  EnableNewRelic: !Equals [ !Ref NewRelicIntegration, Enabled]
  EnableFargate: !Not [!Equals [ !Ref FargateNamespaces, ""]]
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  EnablePublicSubnets: !Not [!Equals [!Ref PublicSubnet1ID, ""]]
  DefaultBastionBootstrap: !Equals [~~/<ConfigSetName>/bastion/BastionBootstrapScript~~, '']
  EnableBastion: !And
    - !Equals [!Ref 'ProvisionBastionHost', 'Enabled']
    - !Not [!Equals [!Ref PublicSubnet1ID, ""]]
  CustomBastionRole: !Not [!Equals [~~/<ConfigSetName>/bastion/BastionIAMRoleName~~, '']]
  AdditionalVars: !Not [!Equals [~~/<ConfigSetName>/bastion/BastionVariables~~, '']]
  EnableClusterAutoScaler: !Equals [!Ref 'ProvisionClusterAutoScaler', 'Enabled']
  EnableALBIngressController: !Equals [!Ref 'ProvisionALBIngressController', 'Enabled']
  EnableMonitoringPrometheusGrafana: !Equals [!Ref 'ProvisionMonitoringStack', 'Prometheus + Grafana']
  EnableEfs: !Equals [!Ref 'EfsStorageClass', 'Enabled']
  EnableWindows: !Equals [!Ref 'WindowsSupport', 'Enabled']
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GenerateClusterName: !Equals [!Ref 'EKSClusterName', '']
  EnableOIDC: !Or
    - !Equals [!Ref 'ProvisionALBIngressController', 'Enabled']
    - !Equals [!Ref 'WindowsSupport', 'Enabled']
    - !Equals [~~/<ConfigSetName>/cluster/IamOidcProvider~~, "Enabled"]
Resources:
  BastionEksPermissions:
    Condition: EnableBastion
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "AllowEKSClusterOperations"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "eks:DescribeCluster"
              - "eks:DescribeUpdate"
              - "eks:ListUpdates"
              - "eks:UpdateClusterVersion"
            Resource: !Sub "arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${EKSControlPlane.Outputs.EKSName}"
      Roles:
        - !GetAtt IamStack.Outputs.BastionRole
  BastionStack:
    Condition: EnableBastion
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-linux-bastion/templates/linux-bastion.template'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        BastionHostName: EKSBastion
        BastionBanner: !Sub
          - 's3://${S3Bucket}/${QSS3KeyPrefix}scripts/bastion_banner_message.txt'
          - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        EnableBanner: true
        BastionTenancy: default
        NumBastionHosts: "1"
        OSImageOverride: !Ref BastionAMIID
        VPCID: !Ref VPCID
        PublicSubnet1ID: !Ref PublicSubnet1ID
        PublicSubnet2ID: !If [2AZDeployment, !Ref PublicSubnet2ID, !Ref "AWS::NoValue"]
        KeyPairName: !Ref KeyPairName
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Sub '${QSS3KeyPrefix}submodules/quickstart-linux-bastion/'
        QSS3BucketRegion: !Ref QSS3BucketRegion
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        BastionInstanceType: ~~/<ConfigSetName>/bastion/BastionInstanceType~~
        RootVolumeSize: ~~/<ConfigSetName>/bastion/BastionRootVolumeSize~~
        AlternativeInitializationScript: !If
          - DefaultBastionBootstrap
          - !Sub
            - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/bastion_bootstrap.sh'
            - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
              S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          - ~~/<ConfigSetName>/bastion/BastionBootstrapScript~~
        AlternativeIAMRole: !GetAtt IamStack.Outputs.BastionRole
        BastionAMIOS: ~~/<ConfigSetName>/bastion/BastionOS~~
        EnableTCPForwarding: ~~/<ConfigSetName>/bastion/BastionEnableTCPForwarding~~
        EnableX11Forwarding: ~~/<ConfigSetName>/bastion/BastionEnableX11Forwarding~~
        EnvironmentVariables: !Sub
        - >
          K8S_CLUSTER_NAME=${EKSControlPlane.Outputs.EKSName},
          K8S_CA_DATA=${EKSControlPlane.Outputs.CAData},
          K8S_ENDPOINT=${EKSControlPlane.Outputs.EKSEndpoint}${Joiner}
          ${BastionVariables}
        - Joiner: !If [AdditionalVars, ",", ""]
          BastionVariables: ~~/<ConfigSetName>/bastion/BastionVariables~~
  NodeGroupStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-nodegroup.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        TargetGroupARNs: ""
        HttpProxy: !Ref HttpProxy
        KeyPairName: !Ref 'KeyPairName'
        NodeAMIOS: ~~/<ConfigSetName>/nodegroup/NodeAMIOS~~
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !If [2AZDeployment, !Ref PrivateSubnet2ID, !Ref "AWS::NoValue" ]
        PrivateSubnet3ID: !If [3AZDeployment, !Ref PrivateSubnet3ID, !Ref "AWS::NoValue" ]
        VPCID: !Ref VPCID
        NodeInstanceType: !Ref NodeInstanceType
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeGroupName: ~~/<ConfigSetName>/default-nodegroup/NodeGroupName~~
        NodeVolumeSize: ~~/<ConfigSetName>/default-nodegroup/NodeVolumeSize~~
        CustomAmiId: ~~/<ConfigSetName>/default-nodegroup/CustomAmiId~~
        ManagedNodeGroup: !Ref ManagedNodeGroup
        ManagedNodeGroupAMIType: ~~/<ConfigSetName>/default-nodegroup/ManagedNodeGroupAMIType~~
        MangedNodeGroupLabel: ~~/<ConfigSetName>/default-nodegroup/MangedNodeGroupLabel~~
        EKSControlPlane: !GetAtt EKSControlPlane.Outputs.EKSName
        ControlPlaneSecurityGroup: !Ref ControlPlaneSecurityGroup
        NodeInstanceProfile: !GetAtt IamStack.Outputs.NodeInstanceProfile
        NodeInstanceRoleName: !GetAtt IamStack.Outputs.NodeInstanceRoleName
        NodeInstanceRoleArn: !GetAtt IamStack.Outputs.NodeInstanceRoleArn
        KubernetesVersion: ~~/<ConfigSetName>/controlplane/KubernetesVersion~~
        BootstrapArguments: ~~/<ConfigSetName>/default-nodegroup/BootstrapArguments~~
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketRegion: !Ref QSS3BucketRegion
  WindowsNodeGroupStack:
    Condition: EnableWindows
    DependsOn: WindowsSupportStack
    Type: "AWS::CloudFormation::Stack"
    Metadata:
      cfn-lint: { config: { ignore_checks: [E9902] } }
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-windows-nodegroup.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KeyPairName: !Ref 'KeyPairName'
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !If [2AZDeployment, !Ref PrivateSubnet2ID, !Ref "AWS::NoValue" ]
        PrivateSubnet3ID: !If [3AZDeployment, !Ref PrivateSubnet3ID, !Ref "AWS::NoValue" ]
        CustomAmiId: !Ref WindowsCustomAmiId
        NodeInstanceType: !Ref WindowsNodeInstanceType
        NumberOfNodes: !Ref WindowsNumberOfNodes
        NodeGroupName: !Ref WindowsNodeGroupName
        NodeVolumeSize: !Ref WindowsNodeVolumeSize
        NodeSecurityGroup: !GetAtt NodeGroupStack.Outputs.EKSNodeSecurityGroup
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        NodeInstanceProfile: !GetAtt IamStack.Outputs.WindowsNodeInstanceProfile
        NodeInstanceRoleArn: !GetAtt IamStack.Outputs.WindowsNodeInstanceRoleArn
        NodeAmiIdSSMParam: /aws/service/ami-windows-latest/Windows_Server-2019-English-Core-EKS_Optimized-1.14/image_id
        BootstrapArguments: ""
        MaxNumberOfNodes: ""
  BastionSShToNodes:
    Condition: EnableBastion
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow SSH from Bastion server to Nodes
      GroupId: !GetAtt NodeGroupStack.Outputs.EKSNodeSecurityGroup
      SourceSecurityGroupId: !GetAtt BastionStack.Outputs.BastionSecurityGroupID
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
  BastionToAPIServerAccess:
    Condition: EnableBastion
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow Bastion server to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !GetAtt BastionStack.Outputs.BastionSecurityGroupID
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  IamStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-iam.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        CreateBastionRole: !If [CustomBastionRole, "Disabled", !If [EnableBastion, "Enabled", "Disabled"]]
        BastionIAMRoleName: ~~/<ConfigSetName>/bastion/BastionIAMRoleName~~
        CreateWindowsRole: !Ref WindowsSupport
  FunctionStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-functions.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        LambdaZipsBucketName: !Sub ['${Prefix}-lambdazips-${AWS::Region}-${AWS::AccountId}', {Prefix: !FindInMap [Config, Prefix, Value]}]
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        KubernetesAdminRoleArn: !GetAtt IamStack.Outputs.KubernetesAdminRoleArn
        ControlPlaneSecurityGroup: !Ref ControlPlaneSecurityGroup
        VPCID: !Ref VPCID
        EKSSubnetIds: !If
          - 3AZDeployment
          - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
          - !If
            - 2AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]]
            - !Ref PrivateSubnet1ID
        EKSClusterName: !If [GenerateClusterName, !Ref GenerateName, !Ref EKSClusterName]
        HttpProxy: !Ref HttpProxy
  ClusterAutoScalerStack:
    Condition: EnableClusterAutoScaler
    Metadata:
      DependsOn:
       - !Ref ControlPlaneSecurityGroupIngress
       - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-cluster-autoscaler.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        NodeInstanceRoleName: !GetAtt IamStack.Outputs.NodeInstanceRoleName
        NodeAutoScalingGroup: !GetAtt NodeGroupStack.Outputs.NodeAutoScalingGroup
        EksClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        KubernetesVersion: ~~/<ConfigSetName>/controlplane/KubernetesVersion~~
  EfsStack:
    Condition: EnableEfs
    Type: 'AWS::CloudFormation::Stack'
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-efs.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        NodeGroupSecurityGroup: !GetAtt NodeGroupStack.Outputs.EKSNodeSecurityGroup
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !If [2AZDeployment, !Ref PrivateSubnet2ID, !Ref "AWS::NoValue" ]
        PrivateSubnet3ID: !If [3AZDeployment, !Ref PrivateSubnet3ID, !Ref "AWS::NoValue" ]
        PerformanceMode: ~~/<ConfigSetName>/efs/EfsPerformanceMode~~
        EfsProvisionedThroughputInMibps: ~~/<ConfigSetName>/efs/EfsProvisionedThroughputInMibps~~
        ThroughputMode: ~~/<ConfigSetName>/efs/EfsThroughputMode~~
  CleanupLambdas:
    Type: Custom::LambdaCleanup
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CleanupLambdas', {Prefix: !FindInMap [Config, Prefix, Value]}]
      SecurityGroupId: !GetAtt ControlPlaneSecurityGroup.GroupId
  CleanupControlPlaneSecurityGroupDependencies:
    Type: Custom::LambdaSGCleanup
    DependsOn: CleanupLambdas
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CleanupSecurityGroupDependencies', {Prefix: !FindInMap [Config, Prefix, Value]}]
      Region: !Ref "AWS::Region"
      SecurityGroups:
        - !GetAtt ControlPlaneSecurityGroup.GroupId
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication
      VpcId: !Ref VPCID
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow SG members to access k8s api
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  EKSControlPlane:
    Type: AWS::CloudFormation::Stack
    DependsOn: [CleanupControlPlaneSecurityGroupDependencies, ControlPlaneSecurityGroupIngress]
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-controlplane.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        SecurityGroupIds: !Ref ControlPlaneSecurityGroup
        SubnetIds: !If
          - EnablePublicSubnets
          - !If
            - 3AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID, !Ref PublicSubnet3ID ]]
            - !If
              - 2AZDeployment
              - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID ]]
              - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PublicSubnet1ID ]]
          - !If
            - 3AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
            - !If
              - 2AZDeployment
              - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]]
              - !Join [",", [ !Ref PrivateSubnet1ID ]]
        RoleArn: !Sub ["arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Prefix}-ControlPlane", {Prefix: !FindInMap [Config, Prefix, Value]}]
        NodeInstanceRoleArn: !GetAtt IamStack.Outputs.NodeInstanceRoleArn
        WindowsNodeInstanceRoleArn: !GetAtt IamStack.Outputs.WindowsNodeInstanceRoleArn
        AdditionalEKSAdminUserArn: !Ref AdditionalEKSAdminUserArn
        AdditionalEKSAdminRoleArn: !Ref AdditionalEKSAdminRoleArn
        KubernetesVersion: ~~/<ConfigSetName>/controlplane/KubernetesVersion~~
        BastionRole: !GetAtt IamStack.Outputs.BastionRole
        FunctionRoleArn: !GetAtt IamStack.Outputs.KubernetesAdminRoleArn
        EKSPublicAccessCIDRs: ~~/<ConfigSetName>/controlplane/EKSPublicAccessCIDRs~~
        EKSPublicAccessEndpoint: !Ref EKSPublicAccessEndpoint
        EKSPrivateAccessEndpoint: ~~/<ConfigSetName>/controlplane/EKSPrivateAccessEndpoint~~
        EKSClusterLoggingTypes: ~~/<ConfigSetName>/controlplane/EKSClusterLoggingTypes~~
        EKSEncryptSecrets: ~~/<ConfigSetName>/controlplane/EKSEncryptSecrets~~
        EKSEncryptSecretsKmsKeyArn: ~~/<ConfigSetName>/controlplane/EKSEncryptSecretsKmsKeyArn~~
        IamOidcProvider: !If [EnableOIDC, 'Enabled', 'Disabled']
        EKSClusterName: !If [GenerateClusterName, !Ref GenerateName, !Ref EKSClusterName]
  PrometheusStack:
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !Ref NodeGroupStack
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Condition: EnableMonitoringPrometheusGrafana
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-prometheus.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
  GrafanaStack:
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !Ref NodeGroupStack
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Condition: EnableMonitoringPrometheusGrafana
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-grafana.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
  FargateStack:
    Condition: EnableFargate
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
         - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-fargate-profile.template.yaml'
         - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
           S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        FargateExecutionRoleArn: !Sub ["arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Prefix}-FargateExecution", {Prefix: !FindInMap [Config, Prefix, Value]}]
        Namespaces: !Ref FargateNamespaces
        Labels: !Ref FargateLabels
        Subnets: !If
          - 3AZDeployment
          - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
          - !If
            - 2AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]]
            - !Ref PrivateSubnet1ID
  ALBIngressStack:
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !Ref NodeGroupStack
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Condition: EnableALBIngressController
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-alb-ingress.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        OIDCIssuerURLWithoutProtocol:  !Join [ '', !Split [ 'https://', !GetAtt EKSControlPlane.Outputs.OIDCIssuerURL ] ]
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
  GenerateNameFunction:
    Condition: GenerateClusterName
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Role: !Sub ["arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Prefix}-CopyZips", {Prefix: !FindInMap [Config, Prefix, Value]}]
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          from random import choice
          from string import ascii_uppercase, digits
          logger = logging.getLogger(__name__)
          def handler(event, context):
              logger.debug(event)
              status = cfnresponse.SUCCESS
              pid = None
              try:
                  if event['RequestType'] == 'Create':
                      pid = 'EKS-' + ''.join((choice(ascii_uppercase + digits) for i in range(8)))
                  else:
                      pid = event['PhysicalResourceId']
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, pid)
  GenerateName:
    Condition: GenerateClusterName
    Type: Custom::GenerateName
    Properties:
      ServiceToken: !GetAtt 'GenerateNameFunction.Arn'
  TestSuiteStack:
    Condition: DeployTestStack
    Type: AWS::CloudFormation::Stack
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !Ref NodeGroupStack
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-test.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        TestWindows: !Ref WindowsSupport
  NewRelicStack:
    DependsOn: FunctionStack
    Condition: EnableNewRelic
    Type: AWS::CloudFormation::Stack
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !Ref NodeGroupStack
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-eks-newrelic-infrastructure/templates/new-relic-infrastructure.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KubeClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        NewRelicLicenseKey: !Ref NewRelicLicenseKey
  SnykStack:
    DependsOn: FunctionStack
    Condition: EnableSnyk
    Type: AWS::CloudFormation::Stack
    Metadata:
      DependsOn:
        - !Ref ControlPlaneSecurityGroupIngress
        - !Ref NodeGroupStack
        - !If [EnableFargate, !Ref FargateNamespaces, !Ref 'AWS::NoValue']
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-eks-snyk/templates/eks-snyk.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KubeClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        SnykIntegrationId: !Ref SnykIntegrationId
        Namespace: snyk-monitor
  WindowsSupportStack:
    DependsOn: NodeGroupStack
    Condition: EnableWindows
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/amazon-eks-windows-support-workload.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        ClusterKubeServerEndpoint: !GetAtt EKSControlPlane.Outputs.EKSEndpoint
        ClusterCACert: !GetAtt EKSControlPlane.Outputs.CAData
        OIDCProvider: !Join [ '', !Split [ 'https://', !GetAtt EKSControlPlane.Outputs.OIDCIssuerURL ] ]
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketRegion: !Ref QSS3BucketRegion
Outputs:
  BastionIP:
    Value: !If
      - EnableBastion
      - !GetAtt BastionStack.Outputs.EIP1
      - ""
  BastionSecurityGroup:
    Value: !If
      - EnableBastion
      - !GetAtt BastionStack.Outputs.BastionSecurityGroupID
      - ""
  BastionAutoScalingGroup:
    Value: !If
      - EnableBastion
      - !GetAtt BastionStack.Outputs.BastionAutoScalingGroup
      - ""
  EKSClusterName:
    Value: !GetAtt EKSControlPlane.Outputs.EKSName
  NodeInstanceProfile:
    Value: !GetAtt IamStack.Outputs.NodeInstanceProfile
  NodeInstanceRoleName:
    Value: !GetAtt IamStack.Outputs.NodeInstanceRoleName
  ControlPlaneSecurityGroup:
    Value: !GetAtt ControlPlaneSecurityGroup.GroupId
  NodeGroupSecurityGroup:
    Value: !GetAtt NodeGroupStack.Outputs.EKSNodeSecurityGroup
  NodeInstanceRoleArn:
    Value: !GetAtt IamStack.Outputs.NodeInstanceRoleArn
  NodeAutoScalingGroup:
    Value: !GetAtt NodeGroupStack.Outputs.NodeAutoScalingGroup
  OIDCIssuerURL:
    Value : !GetAtt EKSControlPlane.Outputs.OIDCIssuerURL
